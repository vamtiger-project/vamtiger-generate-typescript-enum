{"version":3,"file":"index.js","sources":["../source/get-enum.ts","../source/save-enum.ts","../source/enum-from-folder-content.ts","../source/generate-enum-from.ts","../source/index.ts"],"sourcesContent":["import { camelCase } from 'lodash';\nimport { IGetEnum, StringConstant, regex } from '.';\n\nexport default function ({ enumObject, name }: IGetEnum['params']) {\n    const { newline, comma } = StringConstant;\n    const { spaces } = regex;\n    const enumBody = Object\n        .keys(enumObject)\n        .map(key => `    ${camelCase(key).replace(spaces, '')} = '${enumObject[key]}'`)\n        .join(`${comma}${newline}`);\n    const enumDeclaration =  [\n        `export enum ${name.replace(spaces, '')} {`,\n        enumBody,\n        `}`\n    ].join(newline);\n\n    return enumDeclaration;\n}","import { write as copyToClipboard } from 'clipboardy';\nimport getEnum from './get-enum';\nimport { ISaveEnum } from '.';\n\nexport default async function ({ name, enumObject, clipboard }: ISaveEnum['params']) {\n    const enumDeclaration = getEnum({\n        name,\n        enumObject\n    });\n\n    if (clipboard) {\n        await copyToClipboard(enumDeclaration);\n    } else {\n        console.log(enumDeclaration);\n    }\n}","import { basename } from 'path';\nimport getFolderContent, { ClassifiedDirectoryContent } from 'vamtiger-get-directory-content-recursive';\nimport saveEnum from './save-enum';\nimport { IEnumFromContent, IEnumObject } from '.';\n\nexport default async function ({ name, path, clipboard }: IEnumFromContent['params']) {\n    const enumName = name || basename(path);\n    const folderContent = await getFolderContent({\n        path\n    }) as string[];\n    const enumObject: IEnumObject = folderContent\n        .map(filePath => basename(filePath))\n        .reduce((currentEnumObject, key) => Object.assign(currentEnumObject, { [key]: key }), {});\n\n    await saveEnum({\n        name: enumName,\n        enumObject,\n        clipboard\n    });\n};","import enumFromFolderContent from './enum-from-folder-content';\nimport { IGenerateEnum, GenerateEnumFrom, ErrorMessage } from '.';\n\nexport default async function ({ from, clipboard, name, path }: IGenerateEnum['params']) {\n    const action = {\n        [GenerateEnumFrom.folderContent]: enumFromFolderContent\n    };\n    const currentAction = action[from];\n    const params = {\n        clipboard,\n        name,\n        path\n    };\n\n    if (!currentAction) {\n        throw new Error(`${ErrorMessage.cannotGenerateEnumFrom}: ${from}`);\n    }\n\n    await currentAction(params);\n}","import { resolve as resolvePath } from 'path';\nimport Args from 'vamtiger-argv/build/main';\nimport getHelp from 'vamtiger-commandline-help';\nimport generateEnumFrom from './generate-enum-from';\n\nexport const regex = {\n    space: /\\s/,\n    spaces: new RegExp('')\n};\n\nexport enum StringConstant {\n    newline = '\\n',\n    comma = ','\n}\n\nexport enum GenerateEnumFrom {\n    folderContent = 'folderContent'\n}\n\nexport enum ErrorMessage {\n    cannotGenerateEnumFrom = 'Cannot generate enum from',\n    noEnumFrom = 'No \"from\" option defined'\n}\n\nexport enum CommandlineArg {\n    from = 'from',\n    help = 'help',\n    name = 'name',\n    clipboard = 'clipboard',\n    directory = 'directory'\n}\n\nexport type Regex = {\n    [K in keyof typeof regex]: RegExp\n}\n\nexport interface IEnumObject {\n    [key: string]: string;\n}\n\nexport interface IGenerateEnum {\n    params: {\n        from: GenerateEnumFrom;\n        path: string;\n        name?: string;\n        clipboard?: boolean;\n    }\n}\n\nexport interface IEnumFromContent {\n    params: Pick<IGenerateEnum['params'], Exclude<keyof IGenerateEnum['params'], 'from'>>;\n}\n\nexport interface IGetEnum {\n    params: {\n        name: string;\n        enumObject: IEnumObject;\n    }\n}\n\nexport interface ISaveEnum {\n    params: Pick<IGenerateEnum['params'], 'clipboard'> & IGetEnum['params']\n}\n\nexport const ShortCommandlineArgs = {\n    [CommandlineArg.from]: 'f',\n    [CommandlineArg.help]: 'h',\n    [CommandlineArg.name]: 'n',\n    [CommandlineArg.clipboard]: 'c',\n    [CommandlineArg.directory]: 'd'\n}\n\nexport const CommandlineDescription = {\n    [CommandlineArg.from]: 'Generate enum from (e.g folder content)',\n    [CommandlineArg.name]: 'Name of the enum declaration',\n    [CommandlineArg.clipboard]: 'copy enum to clipboard',\n    [CommandlineArg.directory]: 'Path for enum from folder content',\n    [CommandlineArg.help]: 'Help',\n}\n\nexport default generateEnumFrom;\n\nconst args = new Args();\nconst from = (args.get(CommandlineArg.from) || args.get(ShortCommandlineArgs[CommandlineArg.from])) as GenerateEnumFrom;\nconst name = (args.get(CommandlineArg.name) || args.get(ShortCommandlineArgs[CommandlineArg.name])) || '';\nconst directory = (args.get(CommandlineArg.directory) || args.get(ShortCommandlineArgs[CommandlineArg.directory])) || '';\nconst clipboard = args.has(CommandlineArg.clipboard) || args.has(ShortCommandlineArgs[CommandlineArg.clipboard]);\nconst params = from && {\n    from,\n    name,\n    path: resolvePath(\n        process.cwd(),\n        directory\n    ),\n    clipboard\n};\nconst help = (args.has(CommandlineArg.help) || args.has(ShortCommandlineArgs[CommandlineArg.help])) && getHelp({\n    args: Object.assign(CommandlineArg),\n    short: ShortCommandlineArgs,\n    description: CommandlineDescription\n});\n\nif (help) {\n    console.log(help);\n} else if (params) {\n    generateEnumFrom(params);\n}"],"names":["enumObject","name","newline","comma","StringConstant","spaces","regex","enumBody","Object","keys","map","key","camelCase","replace","join","clipboard","enumDeclaration","getEnum","copyToClipboard","console","log","path","saveEnum","basename","getFolderContent","filePath","reduce","currentEnumObject","assign","[object Object]","from","currentAction","GenerateEnumFrom","folderContent","enumFromFolderContent","params","Error","ErrorMessage","cannotGenerateEnumFrom","space","RegExp","CommandlineArg","ShortCommandlineArgs","help","directory","CommandlineDescription","args","Args","get","has","resolvePath","process","cwd","getHelp","short","description","generateEnumFrom"],"mappings":"mtBAGyBA,WAAEA,EAAUC,KAAEA,IACnC,MAAMC,QAAEA,EAAOC,MAAEA,GAAUC,wBACrBC,OAAEA,GAAWC,MACbC,EAAWC,OACZC,KAAKT,GACLU,IAAIC,UAAcC,iBAAUD,GAAKE,QAAQR,EAAQ,UAAUL,EAAWW,OACtEG,QAAQX,IAAQD,KAOrB,sBALmBD,EAAKY,QAAQR,EAAQ,QACpCE,EACA,KACFO,KAAKZ,sBCVoBD,KAAEA,EAAID,WAAEA,EAAUe,UAAEA,oDAC/C,MAAMC,EAAkBC,SACpBhB,KAAAA,EACAD,WAAAA,IAGAe,QACMG,iBAAgBF,GAEtBG,QAAQC,IAAIJ,qCCRWf,KAAEA,OAAMoB,EAAIN,UAAEA,0DASnCO,UACFrB,KATaA,GAAQsB,cAASF,GAU9BrB,kBATwBwB,uBACxBH,KAGCX,IAAIe,GAAYF,cAASE,IACzBC,OAAO,CAACC,EAAmBhB,IAAQH,OAAOoB,OAAOD,GAAqBE,CAAClB,GAAMA,QAK9EI,UAAAA,iCCduBe,KAAEA,EAAIf,UAAEA,EAASd,KAAEA,OAAMoB,oDACpD,MAGMU,GAFFF,CAACG,yBAAiBC,eAAgBC,uBAETJ,GACvBK,GACFpB,UAAAA,EACAd,KAAAA,OACAoB,GAGJ,IAAKU,EACD,MAAM,IAAIK,SAASC,qBAAaC,2BAA2BR,WAGzDC,EAAcI,WCbX7B,OACTiC,MAAO,KACPlC,OAAQ,IAAImC,OAAO,MAGvB,SAAYpC,GACRA,eACAA,YAFJ,CAAYA,yBAAAA,6BAKA4B,2BAAAA,4DAIZ,SAAYK,GACRA,qDACAA,wCAFJ,CAAYA,uBAAAA,0BAKZ,SAAYI,GACRA,cACAA,cACAA,cACAA,wBACAA,wBALJ,CAAYA,yBAAAA,4BAwCZ,MAAaC,sBACTb,CAACY,uBAAeX,MAAO,IACvBD,CAACY,uBAAeE,MAAO,IACvBd,CAACY,uBAAexC,MAAO,IACvB4B,CAACY,uBAAe1B,WAAY,IAC5Bc,CAACY,uBAAeG,WAAY,KAGnBC,wBACThB,CAACY,uBAAeX,MAAO,0CACvBD,CAACY,uBAAexC,MAAO,+BACvB4B,CAACY,uBAAe1B,WAAY,yBAC5Bc,CAACY,uBAAeG,WAAY,oCAC5Bf,CAACY,uBAAeE,MAAO,QAKrBG,KAAO,IAAIC,KACXjB,KAAQgB,KAAKE,IAAIP,uBAAeX,OAASgB,KAAKE,IAAIN,qBAAqBD,uBAAeX,OACtF7B,KAAQ6C,KAAKE,IAAIP,uBAAexC,OAAS6C,KAAKE,IAAIN,qBAAqBD,uBAAexC,QAAW,GACjG2C,UAAaE,KAAKE,IAAIP,uBAAeG,YAAcE,KAAKE,IAAIN,qBAAqBD,uBAAeG,aAAgB,GAChH7B,UAAY+B,KAAKG,IAAIR,uBAAe1B,YAAc+B,KAAKG,IAAIP,qBAAqBD,uBAAe1B,YAC/FoB,OAASL,OACXA,KAAAA,KACA7B,KAAAA,KACAoB,KAAM6B,aACFC,QAAQC,MACRR,WAEJ7B,UAAAA,WAEE4B,MAAQG,KAAKG,IAAIR,uBAAeE,OAASG,KAAKG,IAAIP,qBAAqBD,uBAAeE,SAAWU,SACnGP,KAAMtC,OAAOoB,OAAOa,wBACpBa,MAAOZ,qBACPa,YAAaV,yBAGbF,KACAxB,QAAQC,IAAIuB,MACLR,QACPqB,iBAAiBrB"}